// DYNAMIC: "DEBUG_VIS"			"0..1"

#include "common_ps_fxc.h"

sampler s_buffer		: register( s0 );
sampler s_depth		: register( s1 );

//x:GetEyeFocusDistance()
//y:DoF Range
//z:nWidth
//w:nHeight
float4 focusInfo	: register( c0 );

//DoF Radius
float2 bokehInfo	: register( c1 );

static const float maxblur = 1.25;

static const float2 Bokeh[141] =
{
	1.797,    -0.352,  
	1.857,    -0.197,  
	1.880,    -0.032,  
	1.870,     0.134,  
	1.825,     0.294,  
	1.746,     0.441,  
	1.662,     0.585,  
	1.579,     0.730,  
	1.495,     0.874,  
	1.412,     1.019,  
	1.328,     1.163,  
	1.245,     1.308,  
	1.156,     1.449,  
	1.036,     1.565,  
	0.895,     1.653,  
	0.740,     1.712,  
	0.574,     1.732,  
	0.408,     1.732,  
	0.241,     1.732,  
	0.074,     1.732,  
	-0.093,     1.732,  
	-0.260,     1.732,  
	-0.427,     1.732,  
	-0.594,     1.732,  
	-0.758,     1.707,  
	-0.912,     1.644,  
	-1.051,     1.553,  
	-1.168,     1.434,  
	-1.254,     1.291,  
	-1.338,     1.147,  
	-1.421,     1.002,  
	-1.505,     0.858,  
	-1.588,     0.713,  
	-1.672,     0.569,  
	-1.755,     0.424,  
	-1.833,     0.277,  
	-1.873,     0.115,  
	-1.879,    -0.051,  
	-1.853,    -0.216,  
	-1.787,    -0.369,  
	-1.704,    -0.513,  
	-1.620,    -0.658,  
	-1.537,    -0.802,  
	-1.454,    -0.947,  
	-1.370,    -1.091,  
	-1.287,    -1.236,  
	-1.203,    -1.380,  
	-1.099,    -1.510,  
	-0.968,    -1.612,  
	-0.819,    -1.687,  
	-0.658,    -1.728,  
	-0.491,    -1.732,  
	-0.324,    -1.732,  
	-0.157,    -1.732,  
	0.010,    -1.732,  
	0.176,    -1.732,  
	0.343,    -1.732,  
	0.510,    -1.732,  
	0.677,    -1.725,  
	0.837,    -1.680,  
	0.984,    -1.602,  
	1.113,    -1.497,  
	1.213,    -1.364,  
	1.296,    -1.219,  
	1.380,    -1.075,  
	1.463,    -0.930,  
	1.546,    -0.786,  
	1.630,    -0.641,  
	1.713,    -0.497,  
	1.797,    -0.352,  
	-0.686,     1.390,  
	-0.626,     1.035,  
	-0.686,     0.681,  
	-0.686,     0.327,  
	-0.676,    -0.001,  
	-0.651,    -0.380,  
	-0.686,    -0.736,  
	-0.778,    -1.030,  
	-0.373,    -1.420,  
	-0.340,     1.313,  
	-0.331,     0.941,  
	-0.340,     0.504,  
	-0.340,     0.150,  
	-0.340,    -0.205,  
	-0.340,    -0.559,  
	-0.298,    -0.878,  
	-0.432,    -1.111,  
	0.341,    -0.800,  
	0.004,     1.035,  
	0.004,     0.681,  
	0.004,     0.327,  
	0.004,    -0.028,  
	0.004,    -0.382,  
	0.004,    -0.736,  
	0.013,    -1.038,  
	0.350,    -0.205,  
	0.350,     0.150,  
	0.350,     0.933,  
	0.350,     0.563,  
	0.350,    -0.516,  
	0.004,    -1.417,  
	0.350,     1.329,  
	0.004,     1.390,  
	0.366,    -1.442,  
	1.165,    -0.819,  
	0.694,     1.035,  
	0.694,     0.681,  
	0.694,     0.327,  
	0.694,    -0.028,  
	0.694,    -0.382,  
	0.694,    -0.736,  
	0.694,    -1.091,  
	1.040,    -0.205,  
	0.955,     0.167,  
	1.040,     0.858,  
	1.040,     0.504,  
	0.988,    -0.564,  
	0.694,    -1.417,  
	0.972,     1.203,  
	0.694,     1.390,  
	0.989,    -1.120,  
	-0.978,     0.445,  
	-1.112,     0.100,  
	-0.926,    -0.185,  
	-0.967,    -0.545,  
	-1.038,     0.808,  
	-1.447,     0.251,  
	-1.521,    -0.110,  
	-1.305,     0.562,  
	-1.119,    -0.887,  
	1.298,     0.663,  
	1.290,    -0.002,  
	1.500,    -0.229,  
	1.315,    -0.516,  
	-0.928,     1.151,  
	1.576,     0.108,  
	-1.304,    -0.544,  
	1.331,     0.310,  
	-0.741,    -1.348,  
	0.358,    -1.137,  
	-1.219,    -0.209,  

};

struct PS_INPUT
{
	float2 texCoords : TEXCOORD0;
};

float4 main(PS_INPUT i) : COLOR
{
	float4 blur = 0.0;
	float2 blurCoords = i.texCoords;
	float radius = bokehInfo.x;

	float focus_distance = focusInfo.x;
	float2 fInverseViewportDimensions = float2( 1.0 / focusInfo.z, 1.0 / focusInfo.w );

	float depth = tex2D(s_depth, i.texCoords).r;

	// Convert from linear depth to metres
	float Dd = depth * (4000 - 7.0);
	
	float xd = abs(Dd - focus_distance);
	float xdd = (Dd < focus_distance) ? (focus_distance - xd) : (focus_distance + xd);
	float blend = bokehInfo.y * (xd / xdd);

	float clampedBlur = clamp(blend,-maxblur,maxblur);
	for(int i = 0; i < 141; i++)
	{
		blur += tex2D(s_buffer, blurCoords + Bokeh[i] * fInverseViewportDimensions * radius * clampedBlur );
	}

	blur /= 141;

#if DEBUG_VIS
	blur.r += blend;
#endif

	return blur;
}