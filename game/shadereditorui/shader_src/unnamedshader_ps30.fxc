// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_SWARM_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );

// Constants
const float4 g_cData_local_player_data		: register( c16 ); 		// Callback

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float _var0 = g_cData_local_player_data.y;
	float _var1 = g_cData_local_player_data.x;
	float _var2 = g_cData_local_player_data.z;
	_var0 = _var0 / float( 100.000000 );
	_var1 = _var1 / float( 100.000000 );
	_var2 = _var2 / float( 100.000000 );
	_var0 = float( 1.000000 ) - _var0;
	float2 _var3 = _var1.xx;
	_var2 = float( 1.000000 ) - _var2;
	float2 _var4 = _var2.xx;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float fs = sin( _var0 );
		float fc = cos( _var0 );
		float4 row_0 = float4( fc * _var3.x, -fs * _var3.x, 0, ( -center_def.x * fc + center_def.y * fs ) * _var3.x + center_def.x + _var4.x );
		float4 row_1 = float4( fs * _var3.y, fc * _var3.y, 0, ( -center_def.x * fs - center_def.y * fc ) * _var3.y + center_def.y + _var4.y );
		_var3.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var3.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	float4 _var5 = tex2D( _Sampler_00, _var3 ).rgba;
	Out.vColor_0 = _var5;
	return Out;
}